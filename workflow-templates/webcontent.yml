name: 'Web Content Update'

on:
  push:
    paths:
    - 'src/web/**'
    branches: [ $default-branch ]

jobs:
  terraform:
    name: 'WebContent'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
        # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

        # Configure AWS creds
    - name: Configure credentials
      id: awscreds
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: "us-east-2"      

# Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform -chdir=src/iac init
    
    # Get bucket name from terraform state file
    - name: Get Bucket Destination Name
      id: getbucket
      run: terraform -chdir=src/iac output -raw bucketname
  
    - name: Copy Content
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: copy
      run: |
        aws s3 sync src/web/ s3://${{ steps.getbucket.outputs.stdout }}/
    
    # Generates an execution plan for Terraform
      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks

    - name: Update PR
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        OUT: "terraform\n${{ steps.copy.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### aws_cli copy status ðŸ–Œ\`${{ steps.copy.outcome }}\`
          
          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.OUT}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

